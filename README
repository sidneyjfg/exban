
# Full Stack Exban - Gerenciamento de Clientes, Imóveis e Financiamentos

Este projeto é uma API REST desenvolvida em Node.js e TypeScript para gerenciar um sistema básico de registro de **clientes**, **imóveis** e **financiamentos habitacionais**. O projeto foi desenvolvido para avaliar a aplicação de boas práticas de código seguindo a metodologia **SOLID** e implementação de funcionalidades CRUD.

## Organização de Pastas no Modelo SOLID

``` bash
fullstackexban/
│
├── services/
│   ├── ClientService.ts
│   ├── DealService.ts
│   └── PropertyService.ts
│
├── shared/
│   └── infra/
│       ├── database/
│       │   ├── data-source.ts
│       │   └── validator/
│
├── tests/
│
├── utils/
│   ├── app.ts
│   └── server.ts
│
├── .env
├── .gitignore
├── Dockerfile
├── exban.yml
├── ormconfig.json
├── package.json
├── package-lock.json
├── tsconfig.build.json
├── tsconfig.json
├── README.md
│
├── models/
│   ├── Client.ts
│   ├── Deal.ts
│   └── Property.ts
│
├── repositories/
│   ├── ClientRepository.ts
│   ├── DealRepository.ts
│   ├── IClientRepository.ts
│   ├── IDealRepository.ts
│   ├── IPropertyRepository.ts
│   └── PropertyRepository.ts
│
├── controllers/
│   ├── ClientController.ts
│   ├── DealController.ts
│   └── PropertyController.ts
│
├── dtos/
│   └── ICreateClient.ts
│
├── routes/
│   ├── ClientRoutes.ts
│   ├── PropertyRoutes.ts
│   └── index.ts
│
frontend/
│
├── public/
│   ├── favicon.ico
│   └── index.html
│
├── src/
│   └── component/
│       ├── style/
│       │   ├── ClientForm.css
│       │   ├── ClientList.css
│       │   ├── Clients.css
│       │   ├── ConfirmModal.css
│       │   ├── NavBar.css
│       │   ├── Properties.css
│       │   ├── Property.css
│       │   ├── PropertyCard.css
│       │   └── PropertyList.css
│       ├── ClientForm.jsx
│       ├── ClientList.jsx
│       ├── ConfirmModal.jsx
│       ├── NavBar.jsx
│       ├── Properties.jsx
│       ├── PropertyCard.jsx
│       ├── PropertyForm.jsx
│       └── PropertyList.jsx
│
├── pages/
│   └── index.js
│
├── services/
│   ├── clientService.js
│   └── propertyService.js
│
├── App.css
├── App.js
├── index.css
└── index.js
```

## Como Executar o Projeto Localmente

### Pré-requisitos

- **Node.js** (versão 14 ou superior)
- **PostgreSQL** (versão 12 ou superior)

### Passos

1. **Clonar o Repositório**
   ```bash
   git clone https://github.com/seu-usuario/fullstack-exban.git
   ```

2. **Instalar Dependências**
   Acesse o diretório do projeto e instale as dependências utilizando o npm:
   ```bash
   cd fullstack-exban
   npm install
   ```

3. **Configurar Banco de Dados**
   Crie um banco de dados PostgreSQL e ajuste as variáveis de ambiente no arquivo `.env`:
   ```bash
   DB_HOST=localhost
   DB_PORT=5432
   DB_USERNAME=seu-usuario
   DB_PASSWORD=sua-senha
   DB_NAME=imoveis_financiamentos_db
   ```

4. **Rodar Migrations**
   Após configurar o banco de dados, execute as migrations para criar as tabelas:
   ```bash
   npm run typeorm migration:run
   ```

5. **Iniciar o Servidor**
   Inicie o servidor em modo de desenvolvimento:
   ```bash
   npm run dev
   ```

6. **Testar a Aplicação**
   Execute os testes unitários com o seguinte comando:
   ```bash
   npm test
   ```

## Funcionalidades

- **Clientes:**
  - Criação, listagem, atualização e remoção de clientes.
  - Validação de CPF e verificação de duplicidade de clientes.
  
- **Imóveis:**
  - Criação, listagem, atualização e remoção de imóveis.
  - Associação de imóveis a clientes.

- **Financiamentos:**
  - Criação de financiamentos habitacionais para clientes.
  - Cálculo de parcelas e condições de pagamento.
